---
- name: Set the Zig OS fact
  ansible.builtin.set_fact:
    zig_os: "{{ ansible_system | lower | replace('darwin', 'macos') }}"

- name: Set the Zig architecture fact
  ansible.builtin.set_fact:
    zig_arch: "{{ ansible_machine | lower | replace('arm64', 'aarch64') }}"

- name: Debug the required Zig version
  ansible.builtin.debug:
    var: zig_version

- name: Resolve the required Zig minor version
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      echo "{{ zig_version }}" | head -c $(echo "{{ zig_version }}" | grep -m 2 -ob "\." | tail -1 | grep -oE "[0-9]+")
  register: zig_required_minor_sh
  changed_when: false
  failed_when: false

- name: Set the required Zig minor version fact
  ansible.builtin.set_fact:
    zig_required_minor_version:
      "{{ zig_required_minor_sh.stdout | default('') }}"

- name: Debug the required Zig minor version fact
  ansible.builtin.debug:
    var: zig_required_minor_version

- name: Resolve the wanted Zig version
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      curl -LsS '{{ zig_download_page }}' | jq -r 'keys_unsorted[]' | grep "{{ zig_required_minor_version | replace('.', '\\.') }}" | sort -V | tail -1
  register: zig_wanted_version_sh
  changed_when: false
  failed_when: zig_wanted_version_sh.rc != 0

- name: Set the wanted Zig version fact
  ansible.builtin.set_fact:
    zig_wanted_version: "{{ zig_wanted_version_sh.stdout | default('') }}"

- name: Debug the wanted Zig version fact
  ansible.builtin.debug:
    var: zig_wanted_version

- name: Get the Zig version
  ansible.builtin.command:
    cmd: "{{ zig_install_dir }}/bin/zig version"
  register: zig_current_version_sh
  changed_when: false
  failed_when: zig_current_version_sh.rc != 0
  ignore_errors: true

- name: Set the current Zig version fact
  ansible.builtin.set_fact:
    zig_current_version: "{{ zig_current_version_sh.stdout | default('') }}"

- name: Debug the current Zig version fact
  ansible.builtin.debug:
    var: zig_current_version

- name: Install Zig
  when: zig_wanted_version != zig_current_version
  notify:
    - zig_clean_tmp
  block:
    - name: Resolve the Zig download URL
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          curl -LsS '{{ zig_download_page }}' | jq -r '."{{ zig_wanted_version }}"."{{ zig_arch }}-{{ zig_os }}"."tarball"'
      register: zig_download_url_sh
      changed_when: false
      failed_when: zig_download_url_sh.rc != 0

    - name: Set the Zig download URL fact
      ansible.builtin.set_fact:
        zig_url: "{{ zig_download_url_sh.stdout | default('') }}"

    - name: Debug the Zig download URL fact
      ansible.builtin.debug:
        var: zig_url

    - name: Resolve the wanted Zig filename
      ansible.builtin.command:
        cmd: "basename '{{ zig_url }}'"
      register: zig_wanted_filename_sh
      changed_when: false
      failed_when: zig_wanted_filename_sh.rc != 0

    - name: Set the wanted Zig filename fact
      ansible.builtin.set_fact:
        zig_wanted_filename: "{{ zig_wanted_filename_sh.stdout | default('') }}"

    - name: Debug the wanted Zig filename fact
      ansible.builtin.debug:
        var: zig_wanted_filename

    - name: Set the Zig filename fact
      ansible.builtin.set_fact:
        zig_filename: "{{ zig_wanted_filename }}"

    - name: Create a temporary directory for the Zig archive
      ansible.builtin.tempfile:
        state: directory
      register: zig_tmp

    - name: Set the temporary Zig directory fact
      ansible.builtin.set_fact:
        zig_tmp_dir: "{{ zig_tmp.path }}"

    - name: Set the Zig extract directory fact
      ansible.builtin.set_fact:
        zig_extract_dir:
          "{{ zig_tmp_dir }}/{{ zig_filename | replace('.tar.xz', '') }}"

    - name: Ensure clean Zig extraction destination
      ansible.builtin.file:
        path: "{{ zig_extract_dir }}"
        state: absent

    - name: Extract the Zig archive
      ansible.builtin.unarchive:
        src: "{{ zig_url }}"
        dest: "{{ zig_tmp_dir }}"
        remote_src: true

    - name: Remove existing Zig binary
      ansible.builtin.file:
        path: "{{ zig_bin }}"
        state: absent

    - name: Remove existing Zig libraries
      ansible.builtin.file:
        path: "{{ zig_lib_dir }}"
        state: absent

    - name: Copy the Zig executable
      ansible.builtin.copy:
        src: "{{ zig_extract_dir }}/zig"
        dest: "{{ zig_install_dir }}/bin/zig"
        mode: "0755"
      notify:
        - zig_clean_extracted

    - name: Copy the Zig libraries
      ansible.posix.synchronize:
        src: "{{ zig_extract_dir }}/lib/"
        dest: "{{ zig_install_dir }}/lib/zig"
        archive: true
      notify:
        - zig_clean_extracted
# vi: ft=yaml.ansible
