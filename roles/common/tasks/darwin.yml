---
- name: Ensure that the required directories exist
  block:
    - name: Ensure that the `.config` directory exists
      ansible.builtin.file:
        path: "{{ config_dir }}"
        state: directory
        mode: "0755"

    - name: Ensure that the `.config/env` directory exists
      ansible.builtin.file:
        path: "{{ env_dir }}"
        state: directory
        mode: "0755"

    - name: Ensure that the `.local` directory exists
      ansible.builtin.file:
        path: "{{ local_dir }}"
        state: directory
        mode: "0755"

    - name: Ensure that the local binaries directory exists
      ansible.builtin.file:
        path: "{{ local_bin_dir }}"
        state: directory
        mode: "0755"

    - name: Ensure that the local libraries directory exists
      ansible.builtin.file:
        path: "{{ local_lib_dir }}"
        state: directory
        mode: "0755"

    - name: Ensure that the local data directory exists
      ansible.builtin.file:
        path: "{{ local_data_dir }}"
        state: directory
        mode: "0755"

    - name: Ensure that the local state directory exists
      ansible.builtin.file:
        path: "{{ local_state_dir }}"
        state: directory
        mode: "0755"

    - name: Ensure that the local `opt` directory exists
      ansible.builtin.file:
        path: "{{ local_opt_dir }}"
        state: directory
        mode: "0755"

    - name: Ensure that the temporary directory exists
      ansible.builtin.file:
        path: "{{ tmp_dir }}"
        state: directory
        mode: "0755"

    - name: Ensure that the development directory exists
      ansible.builtin.file:
        path: "{{ dev_dir }}"
        state: directory
        mode: "0755"

    - name: Ensure that the learning directory exists
      ansible.builtin.file:
        path: "{{ learning_dev_dir }}"
        state: directory
        mode: "0755"

    - name: Ensure that the Visiosto development directory exists
      ansible.builtin.file:
        path: "{{ visiosto_dev_dir }}"
        state: directory
        mode: "0755"

    - name: Ensure that the `etc` configuration directory exists
      ansible.builtin.file:
        path: "{{ etc_dir }}"
        state: directory
        mode: "0755"

- name: Set up git
  block:
    # NOTE: The global `.gitignore_global` is rarely updated, so copying it is
    # safe.
    - name: Copy the global Git ignores
      ansible.builtin.copy:
        src: gitignore_global
        dest: "{{ ansible_user_dir }}/.gitignore_global"
        mode: "0644"
        force: true

    - name: Set user.name to Git configuration
      community.general.git_config:
        name: user.name
        scope: global
        value: "{{ git_user_name }}"

    - name: Set user.email to Git configuration
      community.general.git_config:
        name: user.email
        scope: global
        value: "{{ git_user_email }}"
      no_log: true

    - name: Set user.signingkey to Git configuration
      community.general.git_config:
        name: user.signingkey
        scope: global
        value: "{{ git_signingkey }}"

    - name: Set commit.gpgsign to Git configuration
      community.general.git_config:
        name: commit.gpgsign
        scope: global
        value: true

    - name: Set tag.gpgsign to Git configuration
      community.general.git_config:
        name: tag.gpgsign
        scope: global
        value: true

    - name: Set core.excludesfile to Git configuration
      community.general.git_config:
        name: core.excludesfile
        scope: global
        value: "{{ ansible_user_dir }}/.gitignore_global"

- name: Clone the `dotfiles` repository
  block:
    - name: Stat dotfiles development directory
      ansible.builtin.stat:
        path: "{{ dotfiles_dir }}"
      register: dotfiles

    - name: Register the dotfiles development directory state fact
      ansible.builtin.set_fact:
        dotfiles_cloned: "{{ dotfiles.stat.exists }}"

    - name: Debug the dotfiles development directory fact
      ansible.builtin.debug:
        var: dotfiles_cloned

    - name: Clone anttikivi/dotfiles
      ansible.builtin.git:
        repo: git@github.com:anttikivi/dotfiles.git
        dest: "{{ dotfiles_dir }}"
        version: main
        accept_newhostkey: true
      when: not dotfiles_cloned

- name: Install utilities
  block:
    - name: Install build utilities
      community.general.homebrew:
        name:
          - cmake
          - ninja
        state: present

    - name: Install general utilities
      community.general.homebrew:
        name:
          - catimg
          - fzf
          - gnu-tar
          - jq
          - ripgrep
          - tree
        state: present

    - name: Install AeroSpace
      when: common_install_aerospace | bool
      block:
        - name: Link the AeroSpace configuration
          ansible.builtin.file:
            src: "{{ dotfiles_dir }}/config/aerospace.toml"
            dest: "{{ ansible_user_dir }}/.aerospace.toml"
            state: link
            force: true

        - name: Tap the repository for AeroSpace
          community.general.homebrew_tap:
            name: nikitabobko/tap
            state: present

        - name: Install AeroSpace
          community.general.homebrew_cask:
            name:
              - nikitabobko/tap/aerospace
            state: present

- name: Set up shell environment
  block:
    - name: Copy the environment variables
      ansible.builtin.template:
        src: env.j2
        dest: "{{ env_dir }}/preset"
        mode: "0600"

    - name: Copy the secret environment variables
      ansible.builtin.template:
        src: env_secrets.j2
        dest: "{{ env_dir }}/secrets"
        mode: "0600"

- name: Set up Zsh
  when: common_use_zsh | bool
  block:
    - name: Ensure that the `.zfunctions` directory exists
      ansible.builtin.file:
        path: "{{ common_zfunctions_dir }}"
        state: directory
        mode: "0755"

    - name: Copy the Zsh-only environment variables
      ansible.builtin.template:
        src: env_zsh_only.j2
        dest: "{{ env_dir }}/zshonly"
        mode: "0600"

    - name: Link `.zshenv`
      ansible.builtin.file:
        src: "{{ dotfiles_dir }}/config/zshenv"
        dest: "{{ ansible_user_dir }}/.zshenv"
        state: link
        force: true

    - name: Link `.zprofile`
      ansible.builtin.file:
        src: "{{ dotfiles_dir }}/config/zprofile"
        dest: "{{ ansible_user_dir }}/.zprofile"
        state: link
        force: true

    - name: Link `.zshrc`
      ansible.builtin.file:
        src: "{{ dotfiles_dir }}/config/zshrc"
        dest: "{{ ansible_user_dir }}/.zshrc"
        state: link
        force: true

    - name: Clone the `purus` repository
      block:
        - name: Stat `purus` development directory
          ansible.builtin.stat:
            path: "{{ common_purus_dir }}"
          register: purus

        - name: Register the `purus` development directory state fact
          ansible.builtin.set_fact:
            purus_cloned: "{{ purus.stat.exists }}"

        - name: Debug the `purus` development directory fact
          ansible.builtin.debug:
            var: purus_cloned

        - name: Clone `anttikivi/purus`
          ansible.builtin.git:
            repo: git@github.com:anttikivi/purus.git
            dest: "{{ common_purus_dir }}"
            version: main
            accept_newhostkey: true
          when: not purus_cloned

    - name: Link the `async` utility
      ansible.builtin.file:
        src: "{{ common_purus_dir }}/async.zsh"
        dest: "{{ common_zfunctions_dir }}/async"
        state: link
        force: true

    - name: Link the prompt
      ansible.builtin.file:
        src: "{{ common_purus_dir }}/purus.zsh"
        dest: "{{ common_zfunctions_dir }}/prompt_purus_setup"
        state: link
        force: true

    - name: Install `zsh-syntax-highlighting`
      community.general.homebrew:
        name: zsh-syntax-highlighting
        state:
          "{{ (common_enable_zsh_syntax_highlighting | bool) |
          ternary('present', 'absent') }}"

- name: Set up Tmux
  block:
    - name: Install Tmux and its dependencies
      community.general.homebrew:
        name:
          - tmux
          - reattach-to-user-namespace
        state: present

    - name: Link the Tmux configuration
      ansible.builtin.file:
        src: "{{ dotfiles_dir }}/config/tmux.conf"
        dest: "{{ ansible_user_dir }}/.tmux.conf"
        state: link
        force: true

- name: Set up the utility scripts
  block:
    - name: Link the script for adding SSH keys to the keychain
      ansible.builtin.file:
        src: "{{ dotfiles_dir }}/bin/addkey"
        dest: "{{ local_bin_dir }}/addkey"
        state: link
        force: true

    - name: Link the script for logging in to the cloud services
      ansible.builtin.file:
        src: "{{ dotfiles_dir }}/bin/cloudauth"
        dest: "{{ local_bin_dir }}/cloudauth"
        state: link
        force: true

    - name: Link the password generation script
      ansible.builtin.file:
        src: "{{ dotfiles_dir }}/bin/pwgen"
        dest: "{{ local_bin_dir }}/pwgen"
        state: link
        force: true

    - name: Link the script for checking the IP address
      ansible.builtin.file:
        src: "{{ dotfiles_dir }}/bin/seeip"
        dest: "{{ local_bin_dir }}/seeip"
        state: link
        force: true

    - name: Link the Tmux sessionizer script
      ansible.builtin.file:
        src: "{{ dotfiles_dir }}/bin/tmux-sessionizer"
        dest: "{{ local_bin_dir }}/tmux-sessionizer"
        state: link
        force: true

- name: Link the global `.editorconfig`
  ansible.builtin.file:
    src: "{{ dotfiles_dir }}/config/editorconfig"
    dest: "{{ ansible_user_dir }}/.editorconfig"
    state: link
    force: true

- name: Set up WezTerm
  block:
    - name:
        Ensure that the environment directory for WezTerm configuration exists
      ansible.builtin.file:
        path: "{{ common_wezterm_env_dir }}"
        state: directory
        mode: "0755"

    - name: Copy the color file for WezTerm
      ansible.builtin.template:
        src: colors.lua.j2
        dest: "{{ common_wezterm_env_dir }}/colors.lua"
        mode: "0600"

    - name: Link the WezTerm configuration
      ansible.builtin.file:
        src: "{{ common_wezterm_config_dir }}"
        dest: "{{ config_dir }}/wezterm"
        state: link
        force: true

    - name: Install WezTerm
      community.general.homebrew_cask:
        name: wezterm
        state: present
# vi: ft=yaml.ansible
