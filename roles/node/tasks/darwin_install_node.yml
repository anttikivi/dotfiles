---
- name: Check for installations of Node.js {{ item }}
  ansible.builtin.shell:
    cmd: |
      source {{ node_nvm_dir }}/nvm.sh
      nvm which {{ item }}
  register: node_sh
  changed_when: false
  failed_when: false

- name: Get the installed version of Node.js {{ item }}
  ansible.builtin.shell:
    cmd: |
      source {{ node_nvm_dir }}/nvm.sh
      nvm version {{ item }}
  register: node_version_sh
  when: node_sh.rc == 0
  changed_when: false
  failed_when: false

- name: Set the fact for the current version of Node.js {{ item }}
  ansible.builtin.set_fact:
    current_node_version: "v{{ node_version_sh.stdout | default('') }}"

- name: Query the latest available version of Node.js {{ item }}
  ansible.builtin.shell:
    cmd: |
      source {{ node_nvm_dir }}/nvm.sh
      nvm version-remote {{ item }}
  register: latest_node_version_sh
  changed_when: false

- name: Set the fact for the latest available version of Node.js {{ item }}
  ansible.builtin.set_fact:
    latest_node_version: "v{{ latest_node_version_sh.stdout | default('') }}"

- name: Install Node.js {{ item }}
  ansible.builtin.shell:
    cmd: |
      source {{ node_nvm_dir }}/nvm.sh
      nvm install {{ item }}
  args:
    creates: "{{ node_nvm_dir }}/versions/{{ latest_node_version }}"
  when: node_sh.rc != 0
  changed_when: node_sh.rc != 0

- name: Update Node.js {{ item }}
  ansible.builtin.shell:
    cmd: |
      source {{ node_nvm_dir }}/nvm.sh
      nvm install --reinstall-packages-from={{ current_node_version }} {{ latest_node_version }}
      nvm uninstall {{ current_node_version }}
  args:
    creates: "{{ node_nvm_dir }}/versions/{{ latest_node_version }}"
    removes: "{{ node_nvm_dir }}/versions/{{ current_node_version }}"
  when: node_sh.rc == 0 and latest_node_version not in current_node_version
  changed_when: node_sh.rc == 0 and latest_node_version not in current_node_version
# vi: ft=yaml.ansible
