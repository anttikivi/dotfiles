#!/bin/sh

set -e

readonly ESC="\033"
readonly ESC_RESET="${ESC}[0m"
readonly ESC_BOLD="${ESC}[1m"
readonly ESC_DIM="${ESC}[2m"
readonly ESC_UNDERLINE="${ESC}[4m"

readonly ESC_RED="${ESC}[31m"
readonly ESC_GREEN="${ESC}[32m"
readonly ESC_YELLOW="${ESC}[33m"
readonly ESC_BLUE="${ESC}[34m"
readonly ESC_MAGENTA="${ESC}[35m"
readonly ESC_CYAN="${ESC}[36m"

readonly ESC_SEA="${ESC}[38;5;49m"

readonly CHAR_ARROW="${ESC_SEA}\xE2\x96\xB6${ESC_RESET}"
readonly CHAR_CLIPBOARD="${ESC_BOLD}${ESC_RED}\xF0\x9F\x93\x8B${ESC_RESET}"
readonly CHAR_CHECK_MARK="${ESC_BOLD}${ESC_GREEN}\xE2\x9C\x94${ESC_RESET}"
readonly CHAR_RIGHT_ANGLE="${ESC_BOLD}${ESC_GREEN}\xE2\x88\x9F${ESC_RESET}"
readonly CHAR_X_MARK="${ESC_BOLD}${ESC_RED}\xE2\x9C\x96${ESC_RESET}"

readonly VAULT_SECRET_FILE="${HOME}/.vault_pass"
readonly ETC_DIR="${HOME}/etc"
readonly TMP_DIR="${HOME}/tmp"
readonly TMP_DOTFILES_DIR="${TMP_DIR}/dotfiles"

brew_install() {
  printf "%b %bChecking whether %b%s%b%b is installed...%b\n" "${CHAR_CLIPBOARD}" "${ESC_DIM}" "${ESC_BOLD}" "$1" "${ESC_RESET}" "${ESC_DIM}" "${ESC_RESET}"
  if brew list --versions "$1" >/dev/null; then
    printf "%b %b%b%s%b%b is already installed!%b\n" "${CHAR_CHECK_MARK}" "${ESC_DIM}" "${ESC_BOLD}" "$1" "${ESC_RESET}" "${ESC_DIM}" "${ESC_RESET}"
  else
    printf "%b %bInstalling %b%s%b%b...%b\n" "${CHAR_ARROW}" "${ESC_CYAN}" "${ESC_BOLD}" "$1" "${ESC_RESET}" "${ESC_CYAN}" "${ESC_RESET}"
    brew install "$1"
    printf "%b %b%b%s%b%b installed!%b\n" "${CHAR_CHECK_MARK}" "${ESC_BOLD}" "${ESC_GREEN}" "$1" "${ESC_RESET}" "${ESC_GREEN}" "${ESC_RESET}"
  fi
}

darwin() {
  printf "%b %bChecking whether %bHomebrew%b%b is installed...%b\n" "${CHAR_CLIPBOARD}" "${ESC_DIM}" "${ESC_BOLD}" "${ESC_RESET}" "${ESC_DIM}" "${ESC_RESET}"

  if ! command -v brew >/dev/null 2>&1; then
    printf "%b %bInstalling %bHomebrew%b%b...%b\n" "${CHAR_ARROW}" "${ESC_CYAN}" "${ESC_BOLD}" "${ESC_RESET}" "${ESC_CYAN}" "${ESC_RESET}"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    printf "   %b %bEvaluating the %bHomebrew%b%b shell environment and adding it to %bPATH%b%b...%b\n" "${CHAR_RIGHT_ANGLE}" "${ESC_DIM}" "${ESC_BOLD}" "${ESC_RESET}" "${ESC_DIM}" "${ESC_BOLD}" "${ESC_RESET}" "${ESC_DIM}" "${ESC_RESET}"
    eval "$(/opt/homebrew/bin/brew shellenv)"
    printf "%b %b%bHomebrew%b%b installed!%b\n" "${CHAR_CHECK_MARK}" "${ESC_BOLD}" "${ESC_GREEN}" "${ESC_RESET}" "${ESC_GREEN}" "${ESC_RESET}"
  else
    printf "%b %b%bHomebrew%b%b is already installed!%b\n" "${CHAR_CHECK_MARK}" "${ESC_DIM}" "${ESC_BOLD}" "${ESC_RESET}" "${ESC_DIM}" "${ESC_RESET}"
  fi

  brew_install pipx

  PATH="${HOME}/.local/bin:${PATH}"
  export PATH

  printf "%b %b%bpipx%b%b paths set!%b\n" "${CHAR_CHECK_MARK}" "${ESC_BOLD}" "${ESC_GREEN}" "${ESC_RESET}" "${ESC_GREEN}" "${ESC_RESET}"

  printf "%b %bChecking whether %bAnsible%b%b is installed...%b\n" "${CHAR_CLIPBOARD}" "${ESC_DIM}" "${ESC_BOLD}" "${ESC_RESET}" "${ESC_DIM}" "${ESC_RESET}"

  if ! brew list | grep ansible >/dev/null; then
    printf "%b %bInstalling %bAnsible%b%b...%b\n" "${CHAR_ARROW}" "${ESC_CYAN}" "${ESC_BOLD}" "${ESC_RESET}" "${ESC_CYAN}" "${ESC_RESET}"
    pipx install --include-deps ansible
    printf "%b %b%bAnsible%b%b installed!%b\n" "${CHAR_CHECK_MARK}" "${ESC_BOLD}" "${ESC_GREEN}" "${ESC_RESET}" "${ESC_GREEN}" "${ESC_RESET}"
  else
    printf "%b %b%bAnsible%b%b is already installed!%b\n" "${CHAR_CHECK_MARK}" "${ESC_DIM}" "${ESC_BOLD}" "${ESC_RESET}" "${ESC_DIM}" "${ESC_RESET}"
  fi
}

debian() {
  printf "%b %bChecking whether %bAnsible%b%b is installed...%b\n" "${CHAR_CLIPBOARD}" "${ESC_DIM}" "${ESC_BOLD}" "${ESC_RESET}" "${ESC_DIM}" "${ESC_RESET}"

  if ! type ansible >/dev/null; then
    printf "%b %bInstalling %bAnsible%b%b...%b\n" "${CHAR_ARROW}" "${ESC_CYAN}" "${ESC_BOLD}" "${ESC_RESET}" "${ESC_CYAN}" "${ESC_RESET}"

    sudo apt update
    sudo apt install wget gpg

    printf "%b Checking the Debian version...\n" "${CHAR_ARROW}"
    debian_version="$(cat /etc/*-release | grep ^VERSION_ID | head -n1 | cut -d '=' -f2)"
    printf "%b Running on %b%s%b\n" "${CHAR_CHECK_MARK}" "${ESC_UNDERLINE}" "${debian_version}" "${ESC_RESET}"

    UBUNTU_CODENAME="jammy"

    if [ "${debian_version}" = "11" ]; then
      UBUNTU_CODENAME="focal"
    elif [ "${debian_version}" = "11" ]; then
      UBUNTU_CODENAME="bionic"
    fi

    wget -O- "https://keyserver.ubuntu.com/pks/lookup?fingerprint=on&op=get&search=0x6125E2A8C77F2818FB7BD15B93C4A3FD7BB9C367" | sudo gpg --dearmour -o /usr/share/keyrings/ansible-archive-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/ansible-archive-keyring.gpg] http://ppa.launchpad.net/ansible/ansible/ubuntu ${UBUNTU_CODENAME} main" | sudo tee /etc/apt/sources.list.d/ansible.list

    sudo apt update
    sudo apt install ansible

    printf "%b %b%bAnsible%b%b installed!%b\n" "${CHAR_CHECK_MARK}" "${ESC_BOLD}" "${ESC_GREEN}" "${ESC_RESET}" "${ESC_GREEN}" "${ESC_RESET}"
  else
    printf "%b %b%bAnsible%b%b is already installed!%b\n" "${CHAR_CHECK_MARK}" "${ESC_DIM}" "${ESC_BOLD}" "${ESC_RESET}" "${ESC_DIM}" "${ESC_RESET}"
  fi
}

ubuntu() {
  printf "%b %bChecking whether %bAnsible%b%b is installed...%b\n" "${CHAR_CLIPBOARD}" "${ESC_DIM}" "${ESC_BOLD}" "${ESC_RESET}" "${ESC_DIM}" "${ESC_RESET}"

  if ! type ansible >/dev/null; then
    printf "%b %bInstalling %bAnsible%b%b...%b\n" "${CHAR_ARROW}" "${ESC_CYAN}" "${ESC_BOLD}" "${ESC_RESET}" "${ESC_CYAN}" "${ESC_RESET}"

    sudo apt update
    sudo apt install software-properties-common
    sudo add-apt-repository --yes --update ppa:ansible/ansible
    sudo apt install ansible

    printf "%b %b%bAnsible%b%b installed!%b\n" "${CHAR_CHECK_MARK}" "${ESC_BOLD}" "${ESC_GREEN}" "${ESC_RESET}" "${ESC_GREEN}" "${ESC_RESET}"
  else
    printf "%b %b%bAnsible%b%b is already installed!%b\n" "${CHAR_CHECK_MARK}" "${ESC_DIM}" "${ESC_BOLD}" "${ESC_RESET}" "${ESC_DIM}" "${ESC_RESET}"
  fi
}

not_supported() {
  printf "%b %b%bThis operating system is not supported!%b\n" "${CHAR_X_MARK}" "${ESC_BOLD}" "${ESC_RED}" "${ESC_RESET}"
  exit 1
}

printf "%b%bRunning the environment setup...%b\n" "${ESC_BOLD}" "${ESC_BLUE}" "${ESC_RESET}"

os_name="$(uname)"
printf "%b Running on %b%s%b\n" "${CHAR_CHECK_MARK}" "${ESC_UNDERLINE}" "${os_name}" "${ESC_RESET}"
if [ "${os_name}" = "Darwin" ]; then
  darwin
elif [ "${os_name}" = "Linux" ]; then
  printf "%b Checking the Linux distribution...\n" "${CHAR_ARROW}"
  distro="$(cat /etc/*-release | grep ^ID | head -n1 | cut -d '=' -f2)"
  printf "%b Running on %b%s%b\n" "${CHAR_CHECK_MARK}" "${ESC_UNDERLINE}" "${distro}" "${ESC_RESET}"

  if [ "${distro}" = "debian" ]; then
    debian
  elif [ "${distro}" = "ubuntu" ]; then
    ubuntu
  else
    not_supported
  fi
else
  not_supported
fi

if ! [ -d "${TMP_DIR}" ]; then
  printf "%bCreating the temporary directory at %b%s%b%b...%b\n" "${ESC_CYAN}" "${ESC_UNDERLINE}" "${TMP_DIR}" "${ESC_RESET}" "${ESC_CYAN}" "${ESC_RESET}"
  mkdir "${TMP_DIR}"
fi

dotfiles_dir="${ETC_DIR}/dotfiles"
use_tmp_dir=false

if ! [ -d "${dotfiles_dir}" ]; then
  use_tmp_dir=true
  if ! [ -d "${TMP_DOTFILES_DIR}" ]; then
    printf "%bCloning the dotfiles repository from %bgithub.com/anttikivi/dotfiles%b%b...%b\n" "${ESC_CYAN}" "${ESC_UNDERLINE}" "${ESC_RESET}" "${ESC_CYAN}" "${ESC_RESET}"
    { git clone --quiet "https://github.com/anttikivi/dotfiles.git" "${TMP_DOTFILES_DIR}" >/dev/null; } 2>&1
  else
    printf "%bUpdating the dotfiles repository from %bgithub.com/anttikivi/dotfiles%b%b...%b\n" "${ESC_CYAN}" "${ESC_UNDERLINE}" "${ESC_RESET}" "${ESC_CYAN}" "${ESC_RESET}"
    git -C "${TMP_DOTFILES_DIR}" pull --quiet >/dev/null
  fi
  dotfiles_dir="${TMP_DOTFILES_DIR}"
fi

old_pwd="$(pwd)"
cd "${dotfiles_dir}"

printf "%b %bUsing %b%s%b%b as the dotfiles directory%b\n" "${CHAR_CHECK_MARK}" "${ESC_DIM}" "${ESC_BOLD}" "${dotfiles_dir}" "${ESC_RESET}" "${ESC_DIM}" "${ESC_RESET}"

# For the moment, I install the Ansible Galaxy requirements only during the
# first run.
if [ "${use_tmp_dir}" = true ]; then
  printf "%b %bUpdating Ansible %bGalaxy%b%b...%b\n" "${CHAR_ARROW}" "${ESC_CYAN}" "${ESC_BOLD}" "${ESC_RESET}" "${ESC_CYAN}" "${ESC_RESET}"
  { ansible-galaxy install -r requirements.yml >/dev/null; } 2>&1
  printf "%b %bAnsible %bGalaxy%b%b updated!%b\n" "${CHAR_CHECK_MARK}" "${ESC_GREEN}" "${ESC_BOLD}" "${ESC_RESET}" "${ESC_GREEN}" "${ESC_RESET}"
fi

printf "%b %bRunning the %bAnsible%b%b playbook...%b\n" "${CHAR_ARROW}" "${ESC_CYAN}" "${ESC_BOLD}" "${ESC_RESET}" "${ESC_CYAN}" "${ESC_RESET}"

# TODO: Should the arguments be reserved for customizing this script?
if [ $# -ne 0 ]; then
  printf "   %b %bUsing the following user-supplied additional arguments: %b%s%b\n" "${CHAR_RIGHT_ANGLE}" "${ESC_DIM}" "${ESC_BOLD}" "$*" "${ESC_RESET}"
fi

(
  # The modifications to `PATH` should only be made during the first run.
  if [ "${use_tmp_dir}" = true ]; then
    # Add the Cargo directory to the path as it's needed to install some Homebrew formulae in the playbook.
    export PATH="${HOME}/.cargo/bin:${PATH}"
  fi

  playbook_file="${dotfiles_dir}/local.yml"

  if [ -f "${VAULT_SECRET_FILE}" ]; then
    printf "   %b %bDecrypting the %bAnsible%b%b vault...%b\n" "${CHAR_RIGHT_ANGLE}" "${ESC_DIM}" "${ESC_BOLD}" "${ESC_RESET}" "${ESC_DIM}" "${ESC_RESET}"
    ansible-playbook "${playbook_file}" --ask-become-pass --vault-password-file "${VAULT_SECRET_FILE}" "$@"
  else
    printf "   %b %bNo Ansible Vault secret file found...%b\n" "${CHAR_RIGHT_ANGLE}" "${ESC_YELLOW}" "${ESC_RESET}"
    ansible-playbook "${playbook_file}" --ask-become-pass "$@"
  fi
)

printf "%b %bAnsible playbook run!%b\n" "${CHAR_CHECK_MARK}" "${ESC_GREEN}" "${ESC_RESET}"

cd "${old_pwd}"

if [ "${use_tmp_dir}" = true ]; then
  rm -rf "${TMP_DOTFILES_DIR}"
fi

printf "%b%bFinished the environment setup!%b\n" "${ESC_BOLD}" "${ESC_MAGENTA}" "${ESC_RESET}"
