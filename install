#!/bin/bash

set -e

source ./utils/colors.sh

declare -a SUPPORTED_PLATFORMS=("darwin" "debian")
readonly SUPPORTED_PLATFORMS

declare -a DARWIN_PACKAGES=(
  "clang-format"
  "cormacrelf/tap/dark-notify"
  "gh"
  "fzf"
  "jq"
  "lima"
  "luarocks"
  "opentofu"
  "php"
  "reattach-to-user-namespace"
  "ripgrep"
  "roots/tap/trellis-cli"
  "shellcheck"
  "stylua"
  "terraform"
  "tmux"
  "wget"
)
readonly DARWIN_PACKAGES

declare -a DARWIN_CASKS=(
  "1password-cli"
  "font-jetbrains-mono"
  "font-jetbrains-mono-nerd-font"
  "nikitabobko/tap/aerospace"
)
readonly DARWIN_CASKS

declare -a CARGO_PACKAGES=("selene")
readonly CARGO_PACKAGES

declare -a GO_PACKAGES=(
  "mvdan.cc/sh/v3/cmd/shfmt@latest"
  "github.com/a-h/templ/cmd/templ@latest"
)
readonly GO_PACKAGES

declare -a LUA_PACKAGES=("luacheck")
readonly LUA_PACKAGES

declare -a PIP_PACKAGES=("ansible-lint" "argcomplete")
readonly PIP_PACKAGES

DISABLE_UPDATES="${DISABLE_UPDATES:-true}"
DISABLE_UPDATES="$(echo "${DISABLE_UPDATES}" | tr '[:upper:]' '[:lower:]')"
readonly DISABLE_UPDATES
export DISABLE_UPDATES

FIRST_RUN="${FIRST_RUN:-false}"
readonly FIRST_RUN

BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly BASEDIR

OS_NAME="$(uname | tr '[:upper:]' '[:lower:]')"
if [ "$(uname)" = "Linux" ]; then
  distro="$(cat /etc/*-release | grep ^ID | head -n1 | cut -d '=' -f2)"
  if [ "${distro}" = "debian" ] || [ "${distro}" = "ubuntu" ]; then
    OS_NAME="debian"
  fi
fi
readonly OS_NAME
export OS_NAME

HAS_CONNECTION=false
if ping -q -c1 8.8.8.8 &>/dev/null; then
  HAS_CONNECTION=true
fi
readonly HAS_CONNECTION
export HAS_CONNECTION

not_supported() {
  echo "This system is not supported: $*" >&2
  exit 1
}

print_help() {
  echo "help"
  exit 0
}

print_version() {
  echo "version"
  exit 0
}

#######################################
# Run Dotbot in the $BASEDIR.
# Globals:
#   BASEDIR
#######################################
run_dotbot() {
  CONFIG="install.conf.yaml"
  DOTBOT_DIR="dotbot"

  DOTBOT_BIN="bin/dotbot"

  cd "${BASEDIR}"
  git -C "${DOTBOT_DIR}" submodule sync --quiet --recursive
  git submodule update --init --recursive "${DOTBOT_DIR}"

  "${BASEDIR}/${DOTBOT_DIR}/${DOTBOT_BIN}" -d "${BASEDIR}" -c "${CONFIG}" "${@}"

  cd - >/dev/null
}

source_environment() {
  echo -e "${ESC_BLUE}Sourcing the shell environment${ESC_RESET}"
  # shellcheck source=./bash_profile
  source "${HOME}/.bash_profile"
  echo -e "${ESC_GREEN}==> Shell environment sourced${ESC_RESET}"
}

if [[ ! " ${SUPPORTED_PLATFORMS[*]} " =~ [[:space:]]${OS_NAME}[[:space:]] ]]; then
  not_supported "${OS_NAME}"
fi

readonly call_args=("$@")

OPTIND=1
while getopts "hV" opt; do
  case "${opt}" in
    h)
      print_help
      ;;
    V)
      print_version
      ;;
    *)
      echo "Unexpected option: ${opt}"
      exit 1
      ;;
  esac
done
shift "$((OPTIND - 1))"
set -- "${call_args[@]}"

if [ "${FIRST_RUN}" = "true" ]; then
  echo -e "${ESC_YELLOW}This is marked as the first run!${ESC_RESET}"
fi

if [ "${HAS_CONNECTION}" = "true" ]; then
  echo "The script can use an Internet connection"
else
  echo -e "${ESC_YELLOW}Running the script without an Internet connection${ESC_RESET}"
fi

if [ "${HAS_CONNECTION}" = "true" ] && [ "${DISABLE_UPDATES}" != "true" ]; then
  echo -e "${ESC_MAGENTA}Installing available updates${ESC_RESET}"
elif [ "${DISABLE_UPDATES}" = "true" ]; then
  echo -e "${ESC_MAGENTA}Installing updates is disabled${ESC_RESET}"
fi

# Package manager installation and updating for each platform.
if [ "${OS_NAME}" = "darwin" ]; then
  if ! command -v brew >/dev/null 2>&1; then
    if [ "${HAS_CONNECTION}" != "true" ]; then
      echo "Homebrew is not installed and there is not Internet connection, exiting..." >&2
      exit 1
    fi
    echo -e "${ESC_BLUE}Installing Homebrew${ESC_RESET}"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    eval "$(/opt/homebrew/bin/brew shellenv)"
    echo -e "${ESC_GREEN}Homebrew installed${ESC_RESET}"
  elif [ "${HAS_CONNECTION}" = "true" ]; then
    # I think Homebrew updates should be installed even if updates are disabled.
    brew update
  fi
elif [ "${OS_NAME}" = "debian" ]; then
  echo -e "${ESC_RED}Updating the packages on '${OS_NAME}' is not implemented yet${ESC_RESET}"
  not_supported "${OS_NAME}"
fi

if ! command -v python >/dev/null 2>&1; then
  if [ "${HAS_CONNECTION}" != "true" ]; then
    echo "Python is not installed and there is not Internet connection, exiting..." >&2
    exit 1
  fi
  echo -e "${ESC_BLUE}Installing Python${ESC_RESET}"
  if [ "${OS_NAME}" = "darwin" ]; then
    brew install python
    PATH="$(brew --prefix python)/libexec/bin:${PATH}"
    export PATH
    PYTHONPATH="$(brew --prefix)/lib/python$(python --version | awk '{print $2}' | cut -d '.' -f 1,2)/site-packages"
    export PYTHONPATH
  elif [ "${OS_NAME}" = "debian" ]; then
    echo -e "${ESC_RED}Installing Python on '${OS_NAME}' is not implemented yet${ESC_RESET}"
    not_supported "${OS_NAME}"
  fi
  echo -e "${ESC_GREEN}Python installed${ESC_RESET}"
elif [ "${HAS_CONNECTION}" = "true" ] && [ "${DISABLE_UPDATES}" != "true" ]; then
  echo -e "${ESC_BLUE}Updating Python${ESC_RESET}"
  if [ "${OS_NAME}" = "darwin" ]; then
    brew upgrade python
  fi
  echo -e "${ESC_GREEN}Python updated${ESC_RESET}"
fi

if ! command -v pipx >/dev/null 2>&1; then
  if [ "${HAS_CONNECTION}" != "true" ]; then
    echo "pipx is not installed and there is not Internet connection, exiting..." >&2
    exit 1
  fi
  echo -e "${ESC_BLUE}Installing pipx${ESC_RESET}"
  if [ "${OS_NAME}" = "darwin" ]; then
    brew install pipx
    PATH="${HOME}/.local/bin:${PATH}"
    export PATH
  elif [ "${OS_NAME}" = "debian" ]; then
    echo -e "${ESC_RED}Installing pipx on '${OS_NAME}' is not implemented yet${ESC_RESET}"
    not_supported "${OS_NAME}"
  fi
  echo -e "${ESC_GREEN}pipx installed${ESC_RESET}"
elif [ "${HAS_CONNECTION}" = "true" ] && [ "${DISABLE_UPDATES}" != "true" ]; then
  echo -e "${ESC_BLUE}Updating pipx${ESC_RESET}"
  if [ "${OS_NAME}" = "darwin" ]; then
    brew upgrade pipx
  fi
  echo -e "${ESC_GREEN}pipx updated${ESC_RESET}"
fi

if ! command -v ansible >/dev/null 2>&1; then
  if [ "${HAS_CONNECTION}" != "true" ]; then
    echo "Ansible is not installed and there is not Internet connection, exiting..." >&2
    exit 1
  fi
  echo -e "${ESC_BLUE}Installing Ansible${ESC_RESET}"
  pipx install --include-deps ansible
  echo -e "${ESC_GREEN}Ansible installed${ESC_RESET}"
elif [ "${HAS_CONNECTION}" = "true" ] && [ "${DISABLE_UPDATES}" != "true" ]; then
  echo -e "${ESC_BLUE}Updating Ansible${ESC_RESET}"
  pipx upgrade ansible
  echo -e "${ESC_GREEN}Ansible updated${ESC_RESET}"
fi

echo -e "\n${ESC_GREEN}==> All prerequisites are set up${ESC_RESET}"

run_dotbot
source_environment

if [ "${HAS_CONNECTION}" = "true" ]; then
  if [ "${OS_NAME}" = "darwin" ]; then
    echo -e "${ESC_BLUE}Installing Homebrew packages${ESC_RESET}"
    for pkg in "${DARWIN_PACKAGES[@]}"; do
      pkg_name="$(basename "${pkg}")"
      echo "Checking if ${pkg} is installed"
      echo "The check is done against '${pkg_name}'"
      if ! brew ls | grep -qw "${pkg_name}"; then
        echo "${pkg} is not installed, installing"
        brew install "${pkg}"
        echo "${pkg} installed"
      elif [ "${DISABLE_UPDATES}" != "true" ]; then
        echo "Updating ${pkg}"
        brew upgrade "${pkg}"
        echo "${pkg} updated"
      fi
    done
    for cask in "${DARWIN_CASKS[@]}"; do
      cask_name="$(basename "${cask}")"
      echo "Checking if ${cask} is installed"
      echo "The check is done against '${cask_name}'"
      if ! brew ls | grep -qw "${cask_name}"; then
        echo "${cask} is not installed, installing"
        brew install --cask "${cask}"
        echo "${cask} installed"
      elif [ "${DISABLE_UPDATES}" != "true" ]; then
        echo "Updating ${cask}"
        brew upgrade --cask "${cask}"
        echo "${cask} updated"
      fi
    done
    echo -e "${ESC_GREEN}==> Homebrew packages installed${ESC_RESET}"
  fi
else
  echo -e "${ESC_YELLOW}Not installing or updating the Homebrew packages due to the script not having an Internet connection${ESC_RESET}"
fi

if [ "${FIRST_RUN}" = "true" ]; then
  echo -e "${ESC_YELLOW}As this is the first run, you need to set up the 1Password CLI${ESC_RESET}"
  echo "Start by making sure that the desktop integration is set up as per the instructions in the 1Password CLI documentation:"
  echo "https://developer.1password.com/docs/cli/get-started/#step-2-turn-on-the-1password-desktop-app-integration"
  read -rp "Press Enter to continue" </dev/tty
  printf "\nNow printing the vaults to ensure that you are logged in to the 1Password CLI\n"
  op vault list
  echo -e "${ESC_GREEN}The 1Password CLI should now be set up!${ESC_RESET}"
fi

if [ "${FIRST_RUN}" = "true" ]; then
  echo -e "${ESC_YELLOW}As this is the first run, Dotbot will be run twice in order to get the public identities from the vault${ESC_RESET}"
  run_dotbot
fi

echo "Checking the GitHub CLI status..."
while ! gh auth status >/dev/null 2>&1; do
  echo -e "${ESC_YELLOW}You need to log in to the GitHub CLI${ESC_RESET}"
  read -rp "Press Enter to run the login command" </dev/tty
  gh auth login
  echo "Checking if the authentication was successful..."
done
echo -e "${ESC_GREEN}The GitHub CLI is set up!${ESC_RESET}"

# The dependant scripts are run last as being in this array implies that they
# depend on other scripts.
declare -a DEPENDANT_SCRIPTS=("alacritty")

echo -e "${ESC_BLUE}Running the tasks from scripts in ${BASEDIR}/installs${ESC_RESET}"
for script in "${BASEDIR}"/installs/*; do
  pkg="$(basename "${script}")"
  if [[ " ${DEPENDANT_SCRIPTS[*]} " =~ [[:space:]]${pkg}[[:space:]] ]]; then
    echo "The ${pkg} script depends on other scripts so it's skipped for now"
    continue
  fi
  cd "$(dirname "${script}")"
  echo -e "${ESC_BLUE}Running the ${pkg} tasks${ESC_RESET}"
  /bin/sh "${script}"
  echo -e "${ESC_GREEN}${pkg} tasks run${ESC_RESET}"
  cd - >/dev/null
done
source_environment
for script in "${BASEDIR}"/installs/*; do
  pkg="$(basename "${script}")"
  if [[ ! " ${DEPENDANT_SCRIPTS[*]} " =~ [[:space:]]${pkg}[[:space:]] ]]; then
    echo "The ${pkg} script was already run"
    continue
  fi
  cd "$(dirname "${script}")"
  echo -e "${ESC_BLUE}Running the ${pkg} tasks${ESC_RESET}"
  /bin/sh "${script}"
  echo -e "${ESC_GREEN}${pkg} tasks run${ESC_RESET}"
  cd - >/dev/null
done
echo -e "${ESC_GREEN}==> All tasks from the scripts run${ESC_RESET}"

source_environment

if [ "${HAS_CONNECTION}" = "true" ]; then
  # TODO: Figure out how to install updates.
  echo -e "${ESC_BLUE}Installing Cargo packages${ESC_RESET}"
  for pkg in "${CARGO_PACKAGES[@]}"; do
    cargo install "${pkg}"
  done
  echo -e "${ESC_GREEN}==> Cargo packages installed${ESC_RESET}"

  echo -e "${ESC_BLUE}Installing Go packages${ESC_RESET}"
  for pkg in "${GO_PACKAGES[@]}"; do
    short_name="$(basename "${pkg}" | cut -c "-$(basename "${pkg}" | grep -ob '@' | head -1 | grep -oE "[0-9]+")")"
    if ! command -v "${short_name}" >/dev/null 2>&1 || [ "${DISABLE_UPDATES}" != "true" ]; then
      go install "${pkg}"
    fi
  done
  echo -e "${ESC_GREEN}==> Go packages installed${ESC_RESET}"

  # TODO: Figure out how to install updates.
  echo -e "${ESC_BLUE}Installing Luarocks packages${ESC_RESET}"
  for pkg in "${LUA_PACKAGES[@]}"; do
    luarocks install "${pkg}"
  done
  echo -e "${ESC_GREEN}==> Luarocks packages installed${ESC_RESET}"

  echo -e "${ESC_BLUE}Installing Python packages${ESC_RESET}"
  for pkg in "${PIP_PACKAGES[@]}"; do
    echo "Checking if ${pkg} is installed"
    if ! pipx list | grep -qw "${pkg}"; then
      echo "${pkg} is not installed, installing"
      pipx install "${pkg}"
      echo "${pkg} installed"
    elif [ "${DISABLE_UPDATES}" != "true" ]; then
      echo "Updating ${pkg}"
      pipx upgrade "${pkg}"
      echo "${pkg} updated"
    fi
  done
  echo -e "${ESC_GREEN}==> Python packages installed${ESC_RESET}"
else
  echo -e "${ESC_YELLOW}Not installing or updating packages due to the script not having an Internet connection${ESC_RESET}"
fi

echo -e "${ESC_BLUE}Creating system daemons${ESC_RESET}"
cd utils
/bin/sh "${BASEDIR}/utils/update_color_scheme_daemon"
cd - >/dev/null
echo -e "${ESC_GREEN}==> All daemons created${ESC_RESET}"

echo -e "\n${ESC_GREEN}==> All tasks run${ESC_RESET}"
