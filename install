#!/usr/bin/env bash

set -e

source ./utils/colors.sh

HAS_CONNECTION=false

if ping -q -c1 8.8.8.8 &>/dev/null; then
  HAS_CONNECTION=true
fi

export HAS_CONNECTION

if [ "${HAS_CONNECTION}" = "true" ]; then
  echo -e "${ESC_BLUE}The script can use an Internet connection${ESC_RESET}"
else
  echo -e "${ESC_YELLOW}Running the script without an Internet connection${ESC_RESET}"
fi

if [ "${DO_UPDATES}" = "true" ] && [ "${HAS_CONNECTION}" = "true" ]; then
  echo -e "${ESC_YELLOW}Installing updates if they are available${ESC_RESET}"
  printf "\n"
fi

os_name="$(uname)"
if [ "${os_name}" = "Darwin" ] && ! command -v brew >/dev/null 2>&1; then
  if [ "${HAS_CONNECTION}" = "true" ]; then
    echo -e "${ESC_BLUE}Installing Homebrew${ESC_RESET}"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    eval "$(/opt/homebrew/bin/brew shellenv)"
  else
    echo "Homebrew is not installed and there is not Internet connection, exiting..." >&2
    exit 1
  fi
fi

brew update

if [ "${os_name}" = "Darwin" ] && [ "${HAS_CONNECTION}" = "true" ] && [ "${DO_HOMEBREW_UPDATES}" = "true" ]; then
  brew upgrade
fi

not_supported() {
  echo "This system is not supported: $*" >&2
  exit 1
}

if ! command -v python >/dev/null 2>&1; then
  if [ "${HAS_CONNECTION}" = "true" ]; then
    echo -e "${ESC_BLUE}Installing Python${ESC_RESET}"
    if [ "${os_name}" = "Darwin" ]; then
      brew install python
      PATH="$(brew --prefix python)/libexec/bin:${PATH}"
      export PATH
      PYTHONPATH="$(brew --prefix)/lib/python$(python --version | awk '{print $2}' | cut -d '.' -f 1,2)/site-packages"
      export PYTHONPATH
    elif [ "${os_name}" = "Linux" ]; then
      distro="$(cat /etc/*-release | grep ^ID | head -n1 | cut -d '=' -f2)"
      if [ "${distro}" = "debian" ]; then
        not_supported "${os_name}" "${distro}"
      elif [ "${distro}" = "ubuntu" ]; then
        not_supported "${os_name}" "${distro}"
      else
        not_supported "${os_name}" "${distro}"
      fi
    fi
  else
    echo "Python is not installed and there is not Internet connection, exiting..." >&2
    exit 1
  fi
fi

if ! command -v pipx >/dev/null 2>&1; then
  if [ "${HAS_CONNECTION}" = "true" ]; then
    echo -e "${ESC_BLUE}Installing pipx${ESC_RESET}"
    if [ "${os_name}" = "Darwin" ]; then
      brew install pipx
      PATH="${HOME}/.local/bin:${PATH}"
      export PATH
    elif [ "${os_name}" = "Linux" ]; then
      distro="$(cat /etc/*-release | grep ^ID | head -n1 | cut -d '=' -f2)"
      if [ "${distro}" = "debian" ]; then
        not_supported "${os_name}" "${distro}"
      elif [ "${distro}" = "ubuntu" ]; then
        not_supported "${os_name}" "${distro}"
      else
        not_supported "${os_name}" "${distro}"
      fi
    fi
  else
    echo "pipx is not installed and there is not Internet connection, exiting..." >&2
    exit 1
  fi
fi

CONFIG="install.conf.yaml"
DOTBOT_DIR="dotbot"

DOTBOT_BIN="bin/dotbot"
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

cd "${BASEDIR}"
git -C "${DOTBOT_DIR}" submodule sync --quiet --recursive
git submodule update --init --recursive "${DOTBOT_DIR}"

"${BASEDIR}/${DOTBOT_DIR}/${DOTBOT_BIN}" -d "${BASEDIR}" -c "${CONFIG}" "${@}"

if [ "$(basename "${SHELL}")" = "zsh" ]; then
  echo -e "${ESC_BLUE}Sourcing the shell environment${ESC_RESET}"
  # shellcheck disable=SC1091
  source "${HOME}/.zshenv"
  # source ~/.zprofile
fi

echo -e "${ESC_BLUE}Installing the tools and utilities using package managers${ESC_RESET}"
pipx install --include-deps ansible
if [ "${os_name}" = "Darwin" ]; then
  darwin_packages=(
    "clang-format"
    "cormacrelf/tap/dark-notify"
    "fzf"
    "jq"
    "opentofu"
    "php"
    "reattach-to-user-namespace"
    "ripgrep"
    "tmux"
    "wget"
  )
  brew install "${darwin_packages[@]}"
  brew install --cask nikitabobko/tap/aerospace
elif [ "${os_name}" = "Linux" ]; then
  distro="$(cat /etc/*-release | grep ^ID | head -n1 | cut -d '=' -f2)"
  if [ "${distro}" = "debian" ]; then
    not_supported "${os_name}" "${distro}"
  elif [ "${distro}" = "ubuntu" ]; then
    not_supported "${os_name}" "${distro}"
  else
    not_supported "${os_name}" "${distro}"
  fi
else
  not_supported "${os_name}"
fi
pipx install ansible-lint
echo -e "${ESC_GREEN}==> Tools and utilities installed${ESC_RESET}"

for script in "${BASEDIR}"/installs/*.sh; do
  cd "$(dirname "${script}")"
  printf "\n"
  echo -e "${ESC_BLUE}Running the '$(basename "${script}" | sed 's/\.sh//')' tasks${ESC_RESET}"
  "${script}"
  echo -e "${ESC_GREEN}==> $(basename "${script}" | sed 's/\.sh//') tasks run${ESC_RESET}"
  cd - >/dev/null
done
