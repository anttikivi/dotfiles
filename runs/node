#!/bin/sh

set -e

\. ../utils/colors.sh
\. ../versions.sh

not_supported() {
  echo "This system is not supported: $*" >&2
  exit 1
}

source_nvm() {
  echo "Starting to source nvm"
  NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
  echo "Going to source nvm from ${NVM_DIR}"
  # shellcheck disable=SC1091
  [ -s "${NVM_DIR}/nvm.sh" ] && \. "${NVM_DIR}/nvm.sh"
  echo "nvm sourced"
}

install_nvm() {
  if [ $# -eq 0 ]; then
    echo "No arguments were passed to the nvm installation function" >&2
    exit 1
  fi
  if [ -z "$1" ]; then
    echo "No version argument was passed to the nvm installation function" >&2
    exit 1
  fi
  echo "Installing nvm $1"
  PROFILE=/dev/null bash -c "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v$1/install.sh | bash"
  echo "nvm installed"
  source_nvm
}

install_node() {
  if [ $# -eq 0 ]; then
    echo "No arguments were passed to the Node.js installation function" >&2
    exit 1
  fi
  if [ -z "$1" ]; then
    echo "No version argument was passed to the Node.js installation function" >&2
    exit 1
  fi
  if ! nvm which "$1" >/dev/null 2>&1; then
    echo "Installing Node.js $1"
    nvm install "$1"
    echo "Node.js $1 installed"
    return
  elif [ "${DISABLE_UPDATES}" != "true" ]; then
    echo "Checking if Node.js $1 needs to be updated"
    current_ver="$(nvm version "$1")"
    echo "The currently installed version of Node.js $1 is ${current_ver}"
    remote_ver="$(nvm version-remote "$1")"
    echo "The currently-available remote version of Node.js $1 is ${remote_ver}"
    if [ "${remote_ver}" != "${current_ver}" ]; then
      echo "Updating Node.js $1"
      nvm install --reinstall-packages-from="$1" "$1"
      echo "Installed Node.js ${current_ver}"
      echo "Uninstalling the old version of Node.js $1"
      nvm uninstall "${current_ver}"
      echo "Uninstalled"
    fi
  else
    echo "Not installing Node.js $1"
  fi
}

if [ "${HAS_CONNECTION}" != "true" ]; then
  echo "Skipping the Node tasks as there is no Internet connection"
  exit 0
fi

source_nvm

minor_ver="$(echo "${NVM_VERSION}" | head -c "$(echo "${NVM_VERSION}" | grep -m 2 -ob "\." | tail -1 | grep -oE "[0-9]+")")"
wanted_ver="$(gh api -X 'GET' '/repos/nvm-sh/nvm/releases?per_page=100' \
  -H 'Accept: application/vnd.github+json' \
  -H 'X-GitHub-Api-Version: 2022-11-28' \
  | jq -r '.[] | .tag_name' | grep "${minor_ver}" | sort -V | tail -1 | cut -c 2-)"
current_ver=""
if command -v nvm >/dev/null 2>&1; then
  current_ver="$(nvm --version)"
  echo "Set ${current_ver} as the current nvm version"
fi

echo "Found the following nvm versions:"
echo "Current version: ${current_ver}"
echo "Wanted version: ${wanted_ver}"

if ! command -v nvm >/dev/null 2>&1; then
  echo "nvm was not found"
  install_nvm "${wanted_ver}"
elif [ "${wanted_ver}" != "${current_ver}" ]; then
  if [ "${DISABLE_UPDATES}" != "true" ]; then
    install_nvm "${wanted_ver}"
  else
    printf "%bnvm update available! Current version: %s, available version: %s%b\n" "${ESC_YELLOW}" "${current_ver}" "${wanted_ver}" "${ESC_RESET}"
  fi
else
  echo "Not installing nvm"
fi

install_node "18"
install_node "20"
install_node "22"

nvm alias default 20
