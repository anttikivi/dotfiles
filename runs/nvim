#!/bin/sh

set -e

\. ../utils/colors.sh
\. ../directories.sh
\. ../versions.sh

invalid_channel() {
  echo "The given Neovim release channel, ${NVIM_CHANNEL}, is invalid" >&2
  exit 1
}

not_supported() {
  echo "This system is not supported: $*" >&2
  exit 1
}

if [ "${HAS_CONNECTION}" = "true" ]; then
  wanted_ver=""
  if [ "${NVIM_CHANNEL}" = "stable" ]; then
    minor_ver="$(echo "${NVIM_VERSION}" | head -c "$(echo "${NVIM_VERSION}" | grep -m 2 -ob "\." | tail -1 | grep -oE "[0-9]+")")"
    wanted_ver="$(gh api '/repos/neovim/neovim/releases?per_page=30' -H 'Accept: application/vnd.github+json' -H 'X-GitHub-Api-Version: 2022-11-28' | jq -r '.[] | .tag_name' | grep "${minor_ver}" | sort -V | tail -1)"
  elif [ "${NVIM_CHANNEL}" = "dev" ]; then
    wanted_ver="$(gh api '/repos/neovim/neovim/releases?per_page=10' -H 'Accept: application/vnd.github+json' -H 'X-GitHub-Api-Version: 2022-11-28' | jq --arg 'tag_name' 'nightly' -r '.[] | select(.tag_name == $tag_name) | .body' | head -2 | tail -1 | cut -c 6-)"
  else
    invalid_channel
  fi
  current_ver=""
  if command -v nvim >/dev/null 2>&1; then
    current_ver="$(nvim --version | head -1 | cut -c 6-)"
    echo "Set ${current_ver} as the current Neovim version"
  fi

  #######################################
  # Build and install Neovim.
  # Globals:
  #   BUILD_DIR
  #   LOCAL_DIR
  #   NVIM_CHANNEL
  #   wanted_ver
  #######################################
  install_nvim() {
    nvim_build_dir=""
    if [ "${NVIM_CHANNEL}" = "stable" ]; then
      nvim_build_dir="${BUILD_DIR}/nvim"
    elif [ "${NVIM_CHANNEL}" = "dev" ]; then
      nvim_build_dir="${BUILD_DIR}/nvim-nightly"
    else
      invalid_channel
    fi

    if [ -e "${nvim_build_dir}" ] && [ ! -d "${nvim_build_dir}" ]; then
      rm -rf "${nvim_build_dir}"
    elif [ -d "${nvim_build_dir}" ]; then
      rm -rf "${nvim_build_dir}/build"
      git -C "${nvim_build_dir}" checkout .
      git -C "${nvim_build_dir}" clean -f
      git -C "${nvim_build_dir}" clean -fd
    else
      git clone git@github.com:neovim/neovim.git "${nvim_build_dir}"
    fi
    if [ "${NVIM_CHANNEL}" = "stable" ]; then
      git -C "${nvim_build_dir}" checkout "tags/${wanted_ver}"
    elif [ "${NVIM_CHANNEL}" = "dev" ]; then
      git -C "${nvim_build_dir}" checkout "tags/nightly"
    fi
    cd "${nvim_build_dir}"
    make \
      CMAKE_BUILD_TYPE="$([ "${NVIM_CHANNEL}" = "stable" ] && echo "Release" || echo "RelWithDebInfo")" \
      CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX=${LOCAL_DIR}"
    make install
    cd - >/dev/null
  }

  if ! command -v nvim >/dev/null 2>&1; then
    install_nvim
  elif [ "${wanted_ver}" != "${current_ver}" ]; then
    if [ "${DISABLE_UPDATES}" != "true" ]; then
      install_nvim
    else
      printf "%bNeovim update available! Current version: %s, available version: %s%b\n" "${ESC_YELLOW}" "${current_ver}" "${wanted_ver}" "${ESC_RESET}"
    fi
  else
    echo "Not installing Neovim"
  fi

  echo "Installing brunch.nvim"

  brunch_dir="${PROJECT_DIR}/brunch.nvim"
  brunch_repo="git@github.com:anttikivi/brunch.nvim.git"

  if [ ! -d "${brunch_dir}" ]; then
    git clone "${brunch_repo}" "${brunch_dir}"
  fi
fi
